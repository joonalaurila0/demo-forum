plugins {
    id "application"
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
    // id 'idea' // optional (to generate IntelliJ IDEA project files)
}

repositories {
    mavenCentral()
}

project.ext.springVersion = "5.3.19"
project.ext.springSecurityVersion = "5.7.2"
project.ext.lombokVersion = "1.18.24"
project.ext.slf4jVersion = "1.7.25"

dependencyManagement {
	imports {
        mavenBom("org.springframework:spring-framework-bom:${springVersion}")
        mavenBom("org.springframework.security:spring-security-bom:${springSecurityVersion}")
	}
}

dependencies {

    // Logging
    implementation "org.slf4j:slf4j-api:${slf4jVersion}!!"
    implementation "org.slf4j:slf4j-simple:${slf4jVersion}!!"
    //implementation 'org.jboss.logging:jboss-logging:3.4.2.Final!!'

    // MariaDB
    implementation("org.mariadb.jdbc:mariadb-java-client:3.0.4!!")

    // Bcrypt implementation
    implementation("org.mindrot:jbcrypt:0.4")

    // Undertow
    implementation("io.undertow:undertow-core:2.2.18.Final!!")
    implementation("io.undertow:undertow-servlet:2.2.18.Final!!")

    // JSON
    implementation("com.google.code.gson:gson:2.9.0!!")

    // Templating -- Spring 5
    implementation("org.thymeleaf:thymeleaf-spring5:3.0.15.RELEASE!!")

    // Spring
    implementation("org.springframework:spring-core:${springVersion}!!") 
    constraints {
        implementation("org.springframework:spring-jcl:${springVersion}!!") // Spring Commons Logging Bridge
    }
    implementation("org.springframework:spring-beans:${springVersion}!!")
    implementation("org.springframework:spring-expression:${springVersion}!!")
    implementation("org.springframework:spring-aop:${springVersion}!!")
    implementation("org.springframework:spring-context:${springVersion}!!") 
    implementation("org.springframework:spring-tx:${springVersion}!!")
    implementation("org.springframework:spring-orm:${springVersion}!!")
    implementation("org.springframework:spring-web:${springVersion}!!")
    implementation("org.springframework:spring-webmvc:${springVersion}!!")

    // Hibernate 5.6, cant use 6 because spring-orm has only support for 5 seemingly.
    // NOTE: RELIES ON JPA 2.2
    implementation "org.hibernate:hibernate-core:5.6.0.Final"
    constraints {
      implementation("javax.persistence:javax.persistence-api:2.2!!")
      implementation("javax.activation:javax.activation-api:1.2.0!!")

      implementation("antlr:antlr:2.7.7!!")
      implementation("com.fasterxml:classmate:1.5.1!!")
      implementation("net.bytebuddy:byte-buddy:1.11.20!!")
      implementation("javax.xml.bind:jaxb-api:2.3.1!!")
      implementation("org.glassfish.jaxb:jaxb-runtime:2.3.1!!")
      implementation("org.hibernate.common:hibernate-commons-annotations:5.1.2.Final!!")
      implementation("org.jboss:jandex:2.2.3.Final!!")
      implementation("org.jboss.logging:jboss-logging:3.4.2.Final!!")
      implementation("org.jboss.spec.javax.transaction:jboss-transaction-api_1.2_spec:1.1.1.Final!!")
    }

    // Hibernate-validator 6.2.0.Final
    implementation("org.hibernate.validator:hibernate-validator:6.2.0.Final")

    // https://projectlombok.org/download
    compileOnly("org.projectlombok:lombok:${lombokVersion}")
    annotationProcessor("org.projectlombok:lombok:${lombokVersion}")
    testCompileOnly("org.projectlombok:lombok:${lombokVersion}")
    testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")
	
    // Testing library
    testImplementation('org.junit.jupiter:junit-jupiter:5.8.1!!')
}

configurations.all {
    resolutionStrategy {
        failOnVersionConflict()
    }
}

application {
    mainClass = "demo.App"
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    consistentResolution {
        useCompileClasspathVersions()
    }
}

ext {
}

task printSourceSetInformation(){
    doLast{
        sourceSets.each { srcSet ->
            println "["+srcSet.name+"]"
            print "-->Source directories: "+srcSet.allJava.srcDirs+"\n"
            print "-->Output directories: "+srcSet.output.classesDirs.files+"\n"
            print "Spring version: ${springVersion}"
            println ""
        }
    }
}

wrapper.gradleVersion = "7.4.2"
